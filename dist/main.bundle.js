!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s="zUnb")}({zUnb:function(e,n,t){"use strict";var r;function o(){return function(e){if(e.includes(r.TRIDENT))return r.TRIDENT;if(e.includes(r.APP_WEB_KIT))return r.APP_WEB_KIT;if(e.includes(r.PRESTO))return r.PRESTO;if(e.includes(r.GECKO))return r.GECKO}(navigator.userAgent.toLowerCase())}t.r(n),function(e){e.TRIDENT="trident",e.APP_WEB_KIT="applewebkit",e.PRESTO="presto",e.GECKO="gecko"}(r||(r={}));function u(){if(document.head.children.namedItem("renderer"))switch(o()){case r.APP_WEB_KIT:case r.PRESTO:case r.GECKO:console.log(1);break;case r.TRIDENT:console.log(2)}}window.onload=function(){u()}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,